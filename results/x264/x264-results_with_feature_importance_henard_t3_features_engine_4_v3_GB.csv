,algorithm_name,ft_dummyfication,origin_ft_selection,ft_selection,hyperparameters,size_target,test_size,coef_order,accuracy,num_features
0,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.1,"no_mbtree    31.59463
dtype: float64","count    191.000000
mean       4.391489
std        7.839393
min        0.028106
25%        1.464271
50%        2.904386
75%        5.243760
max       57.207198
Name: % error, dtype: float64",4
1,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Lasso(max_iter=1),Performance,0.1,"no_mbtree    27.511296
dtype: float64","count    191.000000
mean       4.457360
std        7.790820
min        0.163996
25%        1.428904
50%        3.085218
75%        4.976699
max       56.826538
Name: % error, dtype: float64",4
2,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(),Performance,0.1,"no_mbtree    26.451318
dtype: float64","count    191.000000
mean       4.479392
std        7.787459
min        0.008248
25%        1.314625
50%        3.321156
75%        4.988090
max       56.727724
Name: % error, dtype: float64",4
3,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.1, l1_ratio=0.1, max_iter=1)",Performance,0.1,"no_mbtree    23.074074
dtype: float64","count    191.000000
mean       4.627350
std        7.763862
min        0.189720
25%        1.340146
50%        3.169061
75%        5.162409
max       56.412887
Name: % error, dtype: float64",4
4,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.1,"no_mbtree    10.531543
dtype: float64","count    191.000000
mean       4.391489
std        7.839393
min        0.028106
25%        1.464271
50%        2.904386
75%        5.243760
max       57.207198
Name: % error, dtype: float64",4
5,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.1,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    191.000000
mean       4.391838
std        7.848127
min        0.097659
25%        1.592210
50%        2.878117
75%        5.202216
max       57.271323
Name: % error, dtype: float64",4
6,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.1,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    191.000000
mean       4.391489
std        7.839383
min        0.028289
25%        1.464091
50%        2.904209
75%        5.243754
max       57.207120
Name: % error, dtype: float64",4
7,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.1,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    191.000000
mean       4.391489
std        7.839393
min        0.028106
25%        1.464271
50%        2.904386
75%        5.243760
max       57.207198
Name: % error, dtype: float64",4
8,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.2,"no_mbtree    29.871587
dtype: float64","count    170.000000
mean       4.630361
std        8.207845
min        0.288434
25%        1.461181
50%        2.999291
75%        5.213217
max       56.898950
Name: % error, dtype: float64",4
9,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.5, max_iter=1)",Performance,0.2,"no_mbtree    27.871587
dtype: float64","count    170.000000
mean       4.663744
std        8.194845
min        0.344524
25%        1.332020
50%        3.389150
75%        5.485279
max       56.735810
Name: % error, dtype: float64",4
10,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.5),Performance,0.2,"no_mbtree    28.513788
dtype: float64","count    170.000000
mean       4.653025
std        8.197307
min        0.465187
25%        1.411078
50%        3.263966
75%        5.375723
max       56.788194
Name: % error, dtype: float64",4
11,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.02, l1_ratio=0.1, max_iter=1)",Performance,0.2,"no_mbtree    27.857824
dtype: float64","count    170.000000
mean       4.663974
std        8.194810
min        0.341938
25%        1.329460
50%        3.391833
75%        5.487627
max       56.734687
Name: % error, dtype: float64",4
12,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.2,"no_mbtree    9.957196
dtype: float64","count    170.000000
mean       4.630361
std        8.207845
min        0.288434
25%        1.461181
50%        2.999291
75%        5.213217
max       56.898950
Name: % error, dtype: float64",4
13,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.2,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    170.000000
mean       4.629569
std        8.208329
min        0.280054
25%        1.459923
50%        2.990684
75%        5.209559
max       56.902551
Name: % error, dtype: float64",4
14,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.2,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    170.000000
mean       4.630375
std        8.207837
min        0.288585
25%        1.461108
50%        2.999446
75%        5.213345
max       56.898885
Name: % error, dtype: float64",4
15,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.2,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    170.000000
mean       4.630361
std        8.207845
min        0.288434
25%        1.461181
50%        2.999291
75%        5.213217
max       56.898950
Name: % error, dtype: float64",4
16,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.3,"no_mbtree    30.579905
dtype: float64","count    149.000000
mean       4.917173
std        8.729184
min        0.003498
25%        1.355934
50%        3.413027
75%        5.282809
max       57.024414
Name: % error, dtype: float64",4
17,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.01, max_iter=1)",Performance,0.3,"no_mbtree    30.539652
dtype: float64","count    149.000000
mean       4.917763
std        8.728645
min        0.003535
25%        1.363063
50%        3.420301
75%        5.276147
max       57.021391
Name: % error, dtype: float64",4
18,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.05),Performance,0.3,"no_mbtree    30.482522
dtype: float64","count    149.000000
mean       4.918666
std        8.727853
min        0.013518
25%        1.373182
50%        3.430625
75%        5.272635
max       57.017101
Name: % error, dtype: float64",4
19,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.01, l1_ratio=1.0, max_iter=1)",Performance,0.3,"no_mbtree    30.539652
dtype: float64","count    149.000000
mean       4.917763
std        8.728645
min        0.003535
25%        1.363063
50%        3.420301
75%        5.276147
max       57.021391
Name: % error, dtype: float64",4
20,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.3,"no_mbtree    1.019330e+01
ref_5        1.166815e-61
dtype: float64","count    149.000000
mean       4.917173
std        8.729184
min        0.003498
25%        1.355934
50%        3.413027
75%        5.282809
max       57.024414
Name: % error, dtype: float64",4
21,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.3,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    149.000000
mean       4.920753
std        8.726856
min        0.016381
25%        1.376084
50%        3.433586
75%        5.245586
max       57.015870
Name: % error, dtype: float64",4
22,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.3,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    149.000000
mean       4.917184
std        8.729174
min        0.003356
25%        1.356078
50%        3.413174
75%        5.282675
max       57.024353
Name: % error, dtype: float64",4
23,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.3,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    149.000000
mean       4.917173
std        8.729184
min        0.003498
25%        1.355934
50%        3.413027
75%        5.282809
max       57.024414
Name: % error, dtype: float64",4
24,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.4,"ref_1        79.568222
ref_5        79.568222
no_mbtree    31.263023
dtype: float64","count    128.000000
mean       4.384690
std        6.385760
min        0.018093
25%        1.486174
50%        3.206232
75%        5.004837
max       43.959991
Name: % error, dtype: float64",4
25,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.2, max_iter=1)",Performance,0.4,"ref_1        127.820843
no_mbtree     29.774927
ref_5         13.631894
dtype: float64","count    128.000000
mean       4.270505
std        5.258271
min        0.222793
25%        1.572268
50%        3.404405
75%        5.200268
max       35.943884
Name: % error, dtype: float64",4
26,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.1),Performance,0.4,"ref_5        75.666443
ref_1        75.666443
no_mbtree    30.944676
dtype: float64","count    128.000000
mean       4.426042
std        6.474973
min        0.045674
25%        1.509242
50%        3.232933
75%        5.017492
max       44.557877
Name: % error, dtype: float64",4
27,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.2, l1_ratio=1.0, max_iter=1)",Performance,0.4,"ref_1        127.820843
no_mbtree     29.774927
ref_5         13.631894
dtype: float64","count    128.000000
mean       4.270505
std        5.258271
min        0.222793
25%        1.572268
50%        3.404405
75%        5.200268
max       35.943884
Name: % error, dtype: float64",4
28,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.4,"ref_1        39.784111
ref_5        39.784111
no_mbtree    10.421008
dtype: float64","count    128.000000
mean       4.384690
std        6.385760
min        0.018093
25%        1.486174
50%        3.206232
75%        5.004837
max       43.959991
Name: % error, dtype: float64",4
29,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.4,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    128.000000
mean       4.651586
std        7.528603
min        0.023788
25%        1.475582
50%        3.211746
75%        5.037974
max       51.002396
Name: % error, dtype: float64",4
30,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.4,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    128.000000
mean       4.435294
std        6.694892
min        0.018230
25%        1.486309
50%        3.206365
75%        5.004897
max       46.082300
Name: % error, dtype: float64",4
31,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.4,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    128.000000
mean       4.694032
std        8.299002
min        0.018093
25%        1.486174
50%        3.206232
75%        5.004837
max       56.940760
Name: % error, dtype: float64",4
32,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.5,"ref_9        161.796329
ref_1        161.319325
no_mbtree     32.425516
ref_5          0.477004
dtype: float64","count    106.000000
mean       3.318860
std        1.999349
min        0.000386
25%        1.661767
50%        2.935904
75%        5.093770
max        7.339651
Name: % error, dtype: float64",4
33,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.8, max_iter=5)",Performance,0.5,"ref_1        159.363919
ref_9         75.937928
no_mbtree     27.630278
dtype: float64","count    106.000000
mean       3.681745
std        2.926748
min        0.353825
25%        1.765925
50%        3.566278
75%        5.404672
max       18.340212
Name: % error, dtype: float64",4
34,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.8),Performance,0.5,"ref_1        126.185266
ref_9        108.168559
no_mbtree     29.703476
ref_5         18.016707
dtype: float64","count    106.000000
mean       3.702056
std        2.922034
min        0.369801
25%        1.576670
50%        3.345880
75%        5.192231
max       18.623236
Name: % error, dtype: float64",4
35,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.8, l1_ratio=1.0, max_iter=5)",Performance,0.5,"ref_1        159.363919
ref_9         75.937928
no_mbtree     27.630278
dtype: float64","count    106.000000
mean       3.681745
std        2.926748
min        0.353825
25%        1.765925
50%        3.566278
75%        5.404672
max       18.340212
Name: % error, dtype: float64",4
36,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.5,"ref_9        80.898165
ref_1        80.659663
no_mbtree    10.808505
ref_5         0.238502
dtype: float64","count    106.000000
mean       3.318860
std        1.999349
min        0.000386
25%        1.661767
50%        2.935904
75%        5.093770
max        7.339651
Name: % error, dtype: float64",4
37,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.5,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    106.000000
mean       3.616899
std        2.918385
min        0.063781
25%        1.797344
50%        2.992397
75%        5.183143
max       18.745606
Name: % error, dtype: float64",4
38,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.5,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    106.000000
mean       3.318901
std        1.999366
min        0.000581
25%        1.661884
50%        2.935943
75%        5.093975
max        7.339860
Name: % error, dtype: float64",4
39,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.5,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    106.000000
mean       3.318860
std        1.999349
min        0.000386
25%        1.661767
50%        2.935904
75%        5.093770
max        7.339651
Name: % error, dtype: float64",4
40,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.6,"ref_1        5.799686e+14
ref_5        5.799686e+14
ref_9        5.799686e+14
no_mbtree    3.087500e+01
dtype: float64","count    85.000000
mean      3.462435
std       1.992681
min       0.075391
25%       2.032172
50%       3.422160
75%       5.315697
max       7.601888
Name: % error, dtype: float64",4
41,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.8, max_iter=100)",Performance,0.6,"ref_1        157.034268
ref_9         60.665487
no_mbtree     25.975081
dtype: float64","count    85.000000
mean      4.059115
std       3.486698
min       0.052502
25%       1.733261
50%       4.147914
75%       5.844853
max      21.080966
Name: % error, dtype: float64",4
42,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.01),Performance,0.6,"ref_9        160.486086
ref_1        160.305505
no_mbtree     30.760047
ref_5          0.180581
dtype: float64","count    85.000000
mean      3.481048
std       2.003440
min       0.045533
25%       2.028013
50%       3.453064
75%       5.330026
max       7.634040
Name: % error, dtype: float64",4
43,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.01, max_iter=1)",Performance,0.6,"ref_1        171.018167
ref_9         91.203212
no_mbtree     28.112894
ref_5          7.304954
dtype: float64","count    85.000000
mean      3.789224
std       2.636528
min       0.373721
25%       1.797856
50%       3.887896
75%       5.640614
max      14.048244
Name: % error, dtype: float64",4
44,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.6,"ref_1        5.052048e+14
ref_5        2.363553e+14
ref_9        1.293624e+14
no_mbtree    1.548976e+13
dtype: float64","count    85.000000
mean      3.462495
std       1.995216
min       0.075391
25%       2.053017
50%       3.422160
75%       5.328265
max       7.601888
Name: % error, dtype: float64",4
45,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.6,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    85.000000
mean      3.898201
std       3.499376
min       0.098136
25%       2.064596
50%       3.398619
75%       5.349628
max      22.419417
Name: % error, dtype: float64",4
46,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.6,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    85.000000
mean      3.473581
std       1.999066
min       0.056521
25%       2.038783
50%       3.441691
75%       5.328480
max       7.622208
Name: % error, dtype: float64",4
47,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.6,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    85.000000
mean      3.473518
std       1.999017
min       0.056706
25%       2.038965
50%       3.441499
75%       5.328373
max       7.622008
Name: % error, dtype: float64",4
48,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.7,"ref_9        161.650808
ref_1        161.028283
no_mbtree     30.879043
ref_5          0.622525
dtype: float64","count    64.000000
mean      3.430030
std       2.038775
min       0.152970
25%       2.037087
50%       3.242506
75%       5.356315
max       7.518348
Name: % error, dtype: float64",4
49,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.2, max_iter=5)",Performance,0.7,"ref_1        165.143529
ref_9        127.204191
no_mbtree     29.681226
dtype: float64","count    64.000000
mean      3.609527
std       2.307435
min       0.056579
25%       1.932072
50%       3.385562
75%       5.535907
max       9.334878
Name: % error, dtype: float64",4
50,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.01),Performance,0.7,"ref_9        160.571731
ref_1        160.476795
no_mbtree     30.849724
ref_5          0.094936
dtype: float64","count    64.000000
mean      3.439476
std       2.044020
min       0.143525
25%       2.038579
50%       3.252272
75%       5.355158
max       7.528519
Name: % error, dtype: float64",4
51,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.2, l1_ratio=1.0, max_iter=5)",Performance,0.7,"ref_1        165.143529
ref_9        127.204191
no_mbtree     29.681226
dtype: float64","count    64.000000
mean      3.609527
std       2.307435
min       0.056579
25%       1.932072
50%       3.385562
75%       5.535907
max       9.334878
Name: % error, dtype: float64",4
52,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.7,"no_mbtree    3.579975e+15
ref_5        1.863573e+13
ref_1        1.073798e+13
ref_9        1.036242e+13
dtype: float64","count    64.000000
mean      3.538864
std       2.164454
min       0.168741
25%       1.693536
50%       3.781792
75%       5.823884
max       8.079970
Name: % error, dtype: float64",4
53,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.7,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    64.000000
mean      3.859624
std       3.181409
min       0.126982
25%       2.068921
50%       3.269378
75%       5.416313
max      17.405534
Name: % error, dtype: float64",4
54,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.7,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    64.000000
mean      3.430112
std       2.038830
min       0.152792
25%       2.037204
50%       3.242690
75%       5.356358
max       7.518540
Name: % error, dtype: float64",4
55,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.7,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    64.000000
mean      3.430030
std       2.038775
min       0.152970
25%       2.037087
50%       3.242506
75%       5.356315
max       7.518348
Name: % error, dtype: float64",4
56,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.8,"ref_9        170.364953
ref_1        170.272127
no_mbtree     31.419516
ref_5          0.092825
dtype: float64","count    43.000000
mean      3.219879
std       1.933134
min       0.224007
25%       1.917176
50%       2.788493
75%       5.229379
max       7.441854
Name: % error, dtype: float64",4
57,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.01, max_iter=1)",Performance,0.8,"ref_1        257.162236
ref_5         86.537947
ref_9         83.535615
no_mbtree     30.539073
dtype: float64","count    43.000000
mean      3.252519
std       1.968818
min       0.071953
25%       2.077507
50%       2.640347
75%       5.342537
max       7.605591
Name: % error, dtype: float64",4
58,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.01),Performance,0.8,"ref_1        170.067498
ref_9        169.979558
no_mbtree     31.392066
ref_5          0.087939
dtype: float64","count    43.000000
mean      3.220978
std       1.934455
min       0.215102
25%       1.918519
50%       2.779817
75%       5.234723
max       7.451443
Name: % error, dtype: float64",4
59,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.01, l1_ratio=1.0, max_iter=1)",Performance,0.8,"ref_1        257.162236
ref_5         86.537947
ref_9         83.535615
no_mbtree     30.539073
dtype: float64","count    43.000000
mean      3.252519
std       1.968818
min       0.071953
25%       2.077507
50%       2.640347
75%       5.342537
max       7.605591
Name: % error, dtype: float64",4
60,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.8,"ref_9        85.182476
ref_1        85.136064
no_mbtree    10.473172
ref_5         0.046413
dtype: float64","count    43.000000
mean      3.219879
std       1.933134
min       0.224007
25%       1.917176
50%       2.788493
75%       5.229379
max       7.441854
Name: % error, dtype: float64",4
61,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.8,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    43.000000
mean      3.215001
std       1.927475
min       0.264213
25%       1.911946
50%       2.827666
75%       5.205653
max       7.398559
Name: % error, dtype: float64",4
62,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.8,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    43.000000
mean      3.219912
std       1.933170
min       0.223779
25%       1.917254
50%       2.788271
75%       5.229537
max       7.442099
Name: % error, dtype: float64",4
63,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.8,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    43.000000
mean      3.219879
std       1.933134
min       0.224007
25%       1.917176
50%       2.788493
75%       5.229379
max       7.441854
Name: % error, dtype: float64",4
64,LinearRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.9,"ref_1        170.476493
ref_9        170.467136
no_mbtree     32.045448
ref_5          0.009358
dtype: float64","count    22.000000
mean      2.906270
std       1.872566
min       0.340533
25%       1.677454
50%       2.599662
75%       4.567378
max       7.316375
Name: % error, dtype: float64",4
65,Lasso,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","Lasso(alpha=0.01, max_iter=1)",Performance,0.9,"ref_1        256.607351
ref_5         85.577897
ref_9         84.197368
no_mbtree     31.189561
dtype: float64","count    22.000000
mean      2.921084
std       1.945691
min       0.186053
25%       1.600595
50%       2.442918
75%       4.496954
max       7.482724
Name: % error, dtype: float64",4
66,Ridge,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",Ridge(alpha=0.01),Performance,0.9,"ref_1        170.272848
ref_9        170.082319
no_mbtree     32.020409
ref_5          0.190529
dtype: float64","count    22.000000
mean      2.906508
std       1.874966
min       0.332352
25%       1.671692
50%       2.598435
75%       4.563649
max       7.325184
Name: % error, dtype: float64",4
67,ElasticNet,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')","ElasticNet(alpha=0.01, l1_ratio=1.0, max_iter=1)",Performance,0.9,"ref_1        256.607351
ref_5         85.577897
ref_9         84.197368
no_mbtree     31.189561
dtype: float64","count    22.000000
mean      2.921084
std       1.945691
min       0.186053
25%       1.600595
50%       2.442918
75%       4.496954
max       7.482724
Name: % error, dtype: float64",4
68,PolynomialRegression,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",LinearRegression(),Performance,0.9,"no_mbtree    3.565289e+15
ref_1        1.594582e+13
ref_5        4.937583e+12
ref_9        1.201943e+12
dtype: float64","count    22.000000
mean      2.869976
std       1.658880
min       0.240144
25%       1.509430
50%       2.514370
75%       4.143515
max       6.609150
Name: % error, dtype: float64",4
69,RandomForest,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",RandomForestRegressor(),Performance,0.9,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    22.000000
mean      2.910504
std       1.878814
min       0.355767
25%       1.702668
50%       2.541411
75%       4.564717
max       7.299970
Name: % error, dtype: float64",4
70,GradientBoostingTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",GradientBoostingRegressor(),Performance,0.9,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    22.000000
mean      2.906280
std       1.872642
min       0.340305
25%       1.677307
50%       2.599574
75%       4.567274
max       7.316620
Name: % error, dtype: float64",4
71,DecisionTree,False,DecisionTree,"Index(['ref_1', 'no_mbtree', 'ref_9', 'ref_5'], dtype='object')",DecisionTreeRegressor(),Performance,0.9,"ref_1       NaN
no_mbtree   NaN
ref_9       NaN
ref_5       NaN
Name: % error, dtype: float64","count    22.000000
mean      2.906270
std       1.872566
min       0.340533
25%       1.677454
50%       2.599662
75%       4.567378
max       7.316375
Name: % error, dtype: float64",4
